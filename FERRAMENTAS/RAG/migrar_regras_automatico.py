#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Migra√ß√£o Autom√°tica de Regras JSON para RAG - ELIS v2
Script para migrar regras do gerenciador JSON para o sistema RAG
"""

import json
import sys
import os
from pathlib import Path
from datetime import datetime

# Adicionar caminhos necess√°rios
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(str(Path(__file__).parent.parent / "GERENCIADOR_REGRAS"))

def executar_migracao_completa():
    """
    Executa migra√ß√£o completa de regras JSON para RAG
    
    Returns:
        Dict com resultado da migra√ß√£o
    """
    print("üîÑ MIGRA√á√ÉO AUTOM√ÅTICA DE REGRAS JSON ‚Üí RAG")
    print("=" * 60)
    
    try:
        # Importar IntegradorMCPRAG
        from integrador_mcp import IntegradorMCPRAG
        
        print("üìã Inicializando IntegradorMCPRAG...")
        integrador = IntegradorMCPRAG()
        
        # Executar migra√ß√£o
        print("üöÄ Iniciando migra√ß√£o de regras...")
        resultado = integrador.migrar_regras_json_para_rag()
        
        # Exibir resultados
        print("\nüìä RESULTADO DA MIGRA√á√ÉO:")
        print("-" * 40)
        
        if resultado.get('status') == 'sucesso':
            print(f"‚úÖ Status: {resultado['status'].upper()}")
            print(f"üìà Regras migradas: {resultado.get('regras_migradas', 0)}")
            
            if resultado.get('erros'):
                print(f"‚ö†Ô∏è Erros encontrados: {len(resultado['erros'])}")
                for i, erro in enumerate(resultado['erros'][:5], 1):
                    print(f"   {i}. {erro}")
                if len(resultado['erros']) > 5:
                    print(f"   ... e mais {len(resultado['erros']) - 5} erros")
            else:
                print("‚úÖ Nenhum erro encontrado")
                
        else:
            print(f"‚ùå Status: {resultado.get('status', 'ERRO').upper()}")
            print(f"üí• Erro: {resultado.get('erro', 'Erro desconhecido')}")
        
        print(f"‚è∞ Timestamp: {resultado.get('timestamp', datetime.now().isoformat())}")
        
        # Testar busca ap√≥s migra√ß√£o
        print("\nüîç TESTANDO BUSCA AP√ìS MIGRA√á√ÉO:")
        print("-" * 40)
        
        contexto_teste = integrador.buscar_contexto_unificado(
            query="regras sistema ELIS",
            session_id="migracao_teste"
        )
        
        if contexto_teste.get('regras'):
            print(f"‚úÖ Regras encontradas: {len(contexto_teste['regras'])}")
            
            # Mostrar primeira regra como exemplo
            primeira_regra = contexto_teste['regras'][0]
            if isinstance(primeira_regra, dict):
                print(f"üìã Exemplo - Fonte: {primeira_regra.get('fonte', 'N/A')}")
                if 'titulo' in primeira_regra:
                    print(f"   T√≠tulo: {primeira_regra['titulo'][:100]}...")
                elif 'conteudo' in primeira_regra:
                    print(f"   Conte√∫do: {primeira_regra['conteudo'][:100]}...")
        else:
            print("‚ö†Ô∏è Nenhuma regra encontrada na busca")
        
        # Verificar estat√≠sticas do RAG
        if 'metadados' in contexto_teste and 'estatisticas' in contexto_teste['metadados']:
            stats = contexto_teste['metadados']['estatisticas']
            print(f"\nüìà ESTAT√çSTICAS DO RAG:")
            print(f"   RAG Dispon√≠vel: {stats.get('rag_disponivel', False)}")
            print(f"   Gerenciador Dispon√≠vel: {stats.get('gerenciador_disponivel', False)}")
            
            if 'rag_stats' in stats and isinstance(stats['rag_stats'], dict):
                rag_stats = stats['rag_stats']
                print(f"   Total de Documentos: {rag_stats.get('total_documentos', 'N/A')}")
                print(f"   Total de Chunks: {rag_stats.get('total_chunks', 'N/A')}")
        
        print("\n" + "=" * 60)
        
        if resultado.get('status') == 'sucesso':
            print("‚úÖ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!")
        else:
            print("‚ùå MIGRA√á√ÉO CONCLU√çDA COM PROBLEMAS")
        
        return resultado
        
    except Exception as e:
        erro_msg = f"Erro cr√≠tico na migra√ß√£o: {str(e)}"
        print(f"\nüí• {erro_msg}")
        return {
            'status': 'erro_critico',
            'erro': erro_msg,
            'timestamp': datetime.now().isoformat()
        }

def verificar_pre_requisitos():
    """
    Verifica se todos os pr√©-requisitos est√£o dispon√≠veis
    
    Returns:
        bool: True se todos os pr√©-requisitos est√£o OK
    """
    print("üîç Verificando pr√©-requisitos...")
    
    requisitos = {
        'IntegradorMCPRAG': False,
        'RAGElis': False,
        'GerenciadorRegras': False
    }
    
    try:
        from integrador_mcp import IntegradorMCPRAG
        requisitos['IntegradorMCPRAG'] = True
        print("   ‚úÖ IntegradorMCPRAG dispon√≠vel")
    except Exception as e:
        print(f"   ‚ùå IntegradorMCPRAG: {e}")
    
    try:
        from rag_elis import RAGElis
        requisitos['RAGElis'] = True
        print("   ‚úÖ RAGElis dispon√≠vel")
    except Exception as e:
        print(f"   ‚ùå RAGElis: {e}")
    
    try:
        from gerenciador_simples import GerenciadorRegras
        requisitos['GerenciadorRegras'] = True
        print("   ‚úÖ GerenciadorRegras dispon√≠vel")
    except Exception as e:
        print(f"   ‚ùå GerenciadorRegras: {e}")
    
    todos_ok = all(requisitos.values())
    
    if todos_ok:
        print("‚úÖ Todos os pr√©-requisitos est√£o dispon√≠veis")
    else:
        print("‚ùå Alguns pr√©-requisitos est√£o faltando")
        faltando = [nome for nome, ok in requisitos.items() if not ok]
        print(f"   Faltando: {', '.join(faltando)}")
    
    return todos_ok

def executar_sincronizacao_completa():
    """
    Executa sincroniza√ß√£o completa entre JSON e RAG
    
    Returns:
        Dict com resultado da sincroniza√ß√£o
    """
    print("\nüîÑ SINCRONIZA√á√ÉO COMPLETA JSON ‚Üî RAG")
    print("=" * 60)
    
    try:
        from integrador_mcp import IntegradorMCPRAG
        integrador = IntegradorMCPRAG()
        
        resultado = integrador.sincronizar_regras()
        
        print("üìä RESULTADO DA SINCRONIZA√á√ÉO:")
        print(f"   Status: {resultado.get('status', 'desconhecido').upper()}")
        
        if 'migracao_json_rag' in resultado:
            migracao = resultado['migracao_json_rag']
            print(f"   Regras migradas: {migracao.get('regras_migradas', 0)}")
            
            if migracao.get('erros'):
                print(f"   Erros: {len(migracao['erros'])}")
        
        return resultado
        
    except Exception as e:
        erro_msg = f"Erro na sincroniza√ß√£o: {str(e)}"
        print(f"üí• {erro_msg}")
        return {
            'status': 'erro',
            'erro': erro_msg,
            'timestamp': datetime.now().isoformat()
        }

def main():
    """
    Fun√ß√£o principal do script
    """
    print("ü§ñ MIGRA√á√ÉO AUTOM√ÅTICA DE REGRAS - ELIS v2")
    print("Migrando regras do JSON para o sistema RAG...")
    print()
    
    # Verificar pr√©-requisitos
    if not verificar_pre_requisitos():
        print("\n‚ùå N√£o √© poss√≠vel continuar sem os pr√©-requisitos")
        return False
    
    print()
    
    # Executar migra√ß√£o
    resultado_migracao = executar_migracao_completa()
    
    # Executar sincroniza√ß√£o
    resultado_sincronizacao = executar_sincronizacao_completa()
    
    # Resultado final
    sucesso_migracao = resultado_migracao.get('status') == 'sucesso'
    sucesso_sincronizacao = resultado_sincronizacao.get('status') == 'sucesso'
    
    print("\n" + "=" * 60)
    print("üéØ RESUMO FINAL:")
    print(f"   Migra√ß√£o: {'‚úÖ SUCESSO' if sucesso_migracao else '‚ùå FALHOU'}")
    print(f"   Sincroniza√ß√£o: {'‚úÖ SUCESSO' if sucesso_sincronizacao else '‚ùå FALHOU'}")
    
    if sucesso_migracao and sucesso_sincronizacao:
        print("\nüéâ MIGRA√á√ÉO AUTOM√ÅTICA CONCLU√çDA COM SUCESSO!")
        print("   As regras JSON foram migradas para o RAG")
        print("   O sistema est√° pronto para busca unificada")
        return True
    else:
        print("\n‚ö†Ô∏è MIGRA√á√ÉO CONCLU√çDA COM PROBLEMAS")
        print("   Verifique os logs acima para detalhes")
        return False

if __name__ == "__main__":
    sucesso = main()
    exit(0 if sucesso else 1)